AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >-
  Serverless backend for the planning applications tracker.

Parameters:
  DynamoEndpoint:
    Type: String
    Default: ''
    Description: Optional override for the DynamoDB endpoint (used for local development with DynamoDB Local).
  DisableApiAuth:
    Type: String
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'false'
    Description: Set to true to disable API authentication (useful for local development).

Conditions:
  UseApiAuth: !Equals [!Ref DisableApiAuth, 'false']

Globals:
  Function:
    Runtime: nodejs20.x
    Timeout: 10
    MemorySize: 256
    Tracing: Active
    Environment:
      Variables:
        TABLE_NAME: !Ref ApplicationsTable
        DOCUMENT_BUCKET: !Ref DocumentsBucket
        REGION: !Ref AWS::Region
        POWERTOOLS_SERVICE_NAME: planning-tracker
        DYNAMODB_ENDPOINT: !Ref DynamoEndpoint

Resources:
  ApplicationsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      TableName: !Sub ${AWS::StackName}-applications
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
        - AttributeName: GSI1PK
          AttributeType: S
        - AttributeName: GSI1SK
          AttributeType: S
        - AttributeName: GSI2PK
          AttributeType: S
        - AttributeName: GSI2SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: GSI1
          Projection:
            ProjectionType: ALL
          KeySchema:
            - AttributeName: GSI1PK
              KeyType: HASH
            - AttributeName: GSI1SK
              KeyType: RANGE
        - IndexName: GSI2
          Projection:
            ProjectionType: ALL
          KeySchema:
            - AttributeName: GSI2PK
              KeyType: HASH
            - AttributeName: GSI2SK
              KeyType: RANGE

  DocumentsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-documents-${AWS::AccountId}
      VersioningConfiguration:
        Status: Suspended
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  PlanningUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${AWS::StackName}-users
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: true
      MfaConfiguration: 'OFF'

  PlanningUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: web-client
      GenerateSecret: false
      UserPoolId: !Ref PlanningUserPool
      ExplicitAuthFlows:
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_USER_PASSWORD_AUTH
      SupportedIdentityProviders:
        - COGNITO
      PreventUserExistenceErrors: ENABLED
      CallbackURLs:
        - http://localhost:3000/callback
        - https://main.d254cstb1eo74n.amplifyapp.com/callback
      LogoutURLs:
        - http://localhost:3000
        - https://main.d254cstb1eo74n.amplifyapp.com

  PlanningIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Sub ${AWS::StackName}-identity
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref PlanningUserPoolClient
          ProviderName: !GetAtt PlanningUserPool.ProviderName

  AuthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud: !Ref PlanningIdentityPool
              'ForAnyValue:StringLike':
                cognito-identity.amazonaws.com:amr: authenticated
      Policies:
        - PolicyName: CognitoAuthorizedAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Query
                  - dynamodb:GetItem
                  - dynamodb:Scan
                Resource:
                  - !GetAtt ApplicationsTable.Arn
                  - !Sub ${ApplicationsTable.Arn}/index/*
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: !Sub ${DocumentsBucket.Arn}/*

  IdentityPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref PlanningIdentityPool
      Roles:
        authenticated: !GetAtt AuthenticatedRole.Arn

  ApplicationsApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: prod
      CorsConfiguration:
        AllowMethods:
          - GET
          - POST
          - PATCH
          - OPTIONS
        AllowHeaders:
          - Authorization
          - Content-Type
        AllowOrigins:
          - http://localhost:3000
          - https://main.d254cstb1eo74n.amplifyapp.com
        MaxAge: 600
      Auth:
        Authorizers:
          CognitoAuthorizer:
            IdentitySource: "$request.header.Authorization"
            JwtConfiguration:
              audience:
                - !Ref PlanningUserPoolClient
              issuer: !Sub https://cognito-idp.${AWS::Region}.amazonaws.com/${PlanningUserPool}
        DefaultAuthorizer: CognitoAuthorizer

  HealthFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/
      Handler: health.handler
      Events:
        Api:
          Type: HttpApi
          Properties:
            ApiId: !Ref ApplicationsApi
            Path: /health
            Method: GET
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
          - src/handlers/health.ts

  CreateApplicationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/
      Handler: createApplication.handler
      Events:
        Api:
          Type: HttpApi
          Properties:
            ApiId: !Ref ApplicationsApi
            Path: /applications
            Method: POST
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
          - src/handlers/createApplication.ts

  ListApplicationsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/
      Handler: listApplications.handler
      Events:
        Api:
          Type: HttpApi
          Properties:
            ApiId: !Ref ApplicationsApi
            Path: /applications
            Method: GET
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
          - src/handlers/listApplications.ts

  GetApplicationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/
      Handler: getApplication.handler
      Events:
        Api:
          Type: HttpApi
          Properties:
            ApiId: !Ref ApplicationsApi
            Path: /applications/{id}
            Method: GET
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
          - src/handlers/getApplication.ts

  UpdateApplicationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/
      Handler: updateApplication.handler
      Events:
        Api:
          Type: HttpApi
          Properties:
            ApiId: !Ref ApplicationsApi
            Path: /applications/{id}
            Method: PATCH
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
          - src/handlers/updateApplication.ts

  CreateIssueFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/
      Handler: createIssue.handler
      Events:
        Api:
          Type: HttpApi
          Properties:
            ApiId: !Ref ApplicationsApi
            Path: /applications/{id}/issues
            Method: POST
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
          - src/handlers/createIssue.ts

  CreateExtensionFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/
      Handler: createExtension.handler
      Events:
        Api:
          Type: HttpApi
          Properties:
            ApiId: !Ref ApplicationsApi
            Path: /applications/{id}/extensions
            Method: POST
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
          - src/handlers/createExtension.ts

  ListIssuesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/
      Handler: listIssues.handler
      Events:
        Api:
          Type: HttpApi
          Properties:
            ApiId: !Ref ApplicationsApi
            Path: /issues
            Method: GET
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
          - src/handlers/listIssues.ts

  UpdateIssueFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/
      Handler: updateIssue.handler
      Events:
        Api:
          Type: HttpApi
          Properties:
            ApiId: !Ref ApplicationsApi
            Path: /applications/{id}/issues/{issueId}
            Method: PATCH
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
          - src/handlers/updateIssue.ts

Outputs:
  ApiUrl:
    Description: HTTP API endpoint
    Value: !Sub https://${ApplicationsApi}.execute-api.${AWS::Region}.amazonaws.com/prod
  UserPoolId:
    Value: !Ref PlanningUserPool
  UserPoolClientId:
    Value: !Ref PlanningUserPoolClient
  IdentityPoolId:
    Value: !Ref PlanningIdentityPool
  DocumentsBucketName:
    Value: !Ref DocumentsBucket
