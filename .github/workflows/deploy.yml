name: Deploy to Supabase & Vercel

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  supabase-migrations:
    name: Push Supabase Migrations
    runs-on: ubuntu-latest
    environment: Production
    env:
      SUPABASE_PROJECT_REF: kswjftmtiuwplqtdwqpn
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: 2.45.5

      - name: Push Database Migrations
        working-directory: supabase
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
          SUPABASE_DB_URL: ${{ secrets.SUPABASE_DB_URL }}
          SUPABASE_DNS_RESOLVER: https
        run: |
          set -euo pipefail
          if [ -z "${SUPABASE_ACCESS_TOKEN:-}" ]; then
            echo "::error file=supabase/migrations::Supabase access token missing. Set SUPABASE_ACCESS_TOKEN in the Production environment." >&2
            exit 1
          fi
          if [ -z "${SUPABASE_DB_URL:-}" ] && [ -z "${SUPABASE_DB_PASSWORD:-}" ]; then
            echo "::error file=supabase/migrations::Supabase connection string missing. Set SUPABASE_DB_URL in the Production environment." >&2
            exit 1
          fi

          DB_URL=$(python ../scripts/ci/resolve_supabase_db_url.py)

          supabase db push --db-url "$DB_URL"

  vercel-deploy:
    name: Deploy Vercel Production Build
    runs-on: ubuntu-latest
    needs: supabase-migrations
    environment: Production
    env:
      VERCEL_ORG_ID: team_08YYYF8jyDBDsJNqpZyv7ys0
      VERCEL_PROJECT_ID: prj_CMI3W6Wea6kXs2nQtBA6qWEU9uj6
      VERCEL_GIT_COMMIT_AUTHOR_NAME: ${{ github.actor }}
      VERCEL_GIT_COMMIT_AUTHOR_LOGIN: ${{ github.actor }}
      VERCEL_GIT_COMMIT_AUTHOR_EMAIL: ${{ github.actor }}@users.noreply.github.com
      VERCEL_GIT_COMMIT_SHA: ${{ github.sha }}
      VERCEL_GIT_COMMIT_REF: ${{ github.ref_name }}
      VERCEL_GIT_COMMIT_MESSAGE: ${{ github.event.head_commit.message || format('CI deploy {0}', github.sha) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Install Dependencies
        working-directory: frontend
        run: npm ci

      - name: Pull Vercel Environment
        working-directory: frontend
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: vercel pull --yes --environment=production --token=$VERCEL_TOKEN --scope=$VERCEL_ORG_ID

      - name: Build Production Bundle
        working-directory: frontend
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: vercel build --prod --token=$VERCEL_TOKEN --scope=$VERCEL_ORG_ID

      - name: Deploy to Vercel
        working-directory: frontend
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: vercel deploy --prebuilt --prod --yes --token=$VERCEL_TOKEN --scope=$VERCEL_ORG_ID
